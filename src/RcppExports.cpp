// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// max_ts
arma::vec max_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_max_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(max_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// min_ts
arma::vec min_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_min_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(min_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// sum_ts
arma::vec sum_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_sum_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// mean_ts
arma::vec mean_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_mean_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// std_ts
arma::vec std_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_std_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(std_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// skew_ts
arma::vec skew_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_skew_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(skew_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// kurt_ts
arma::vec kurt_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_kurt_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(kurt_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// amplitude_ts
arma::vec amplitude_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_amplitude_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(amplitude_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// fslope_ts
arma::vec fslope_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_fslope_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(fslope_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// abs_sum_ts
arma::vec abs_sum_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_abs_sum_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(abs_sum_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// amd_ts
arma::vec amd_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_amd_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(amd_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// mse_ts
arma::vec mse_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_mse_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(mse_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// fqr_ts
arma::vec fqr_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_fqr_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(fqr_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// tqr_ts
arma::vec tqr_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_tqr_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(tqr_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// sqr_ts
arma::vec sqr_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_sqr_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(sqr_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// iqr_ts
arma::vec iqr_ts(const arma::mat& mtx);
RcppExport SEXP _sitsfeats_iqr_ts(SEXP mtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mtx(mtxSEXP);
    rcpp_result_gen = Rcpp::wrap(iqr_ts(mtx));
    return rcpp_result_gen;
END_RCPP
}
// row_wide_loop
arma::mat row_wide_loop(arma::mat& x);
RcppExport SEXP _sitsfeats_row_wide_loop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(row_wide_loop(x));
    return rcpp_result_gen;
END_RCPP
}
// convexHullRcpp
Rcpp::NumericMatrix convexHullRcpp(SEXP pointsMatrixSEXP);
RcppExport SEXP _sitsfeats_convexHullRcpp(SEXP pointsMatrixSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pointsMatrixSEXP(pointsMatrixSEXPSEXP);
    rcpp_result_gen = Rcpp::wrap(convexHullRcpp(pointsMatrixSEXP));
    return rcpp_result_gen;
END_RCPP
}
// calculate_vec
arma::mat calculate_vec(const arma::vec& timeseries);
RcppExport SEXP _sitsfeats_calculate_vec(SEXP timeseriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeseries(timeseriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_vec(timeseries));
    return rcpp_result_gen;
END_RCPP
}
// calculate_vec_v2
arma::mat calculate_vec_v2(const arma::mat& timeseries);
RcppExport SEXP _sitsfeats_calculate_vec_v2(SEXP timeseriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeseries(timeseriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_vec_v2(timeseries));
    return rcpp_result_gen;
END_RCPP
}
// calculate_vec_v3
Rcpp::List calculate_vec_v3(arma::mat& timeseries);
RcppExport SEXP _sitsfeats_calculate_vec_v3(SEXP timeseriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type timeseries(timeseriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_vec_v3(timeseries));
    return rcpp_result_gen;
END_RCPP
}
// calc_distance
arma::vec calc_distance(const arma::mat& line, const arma::rowvec& pts_cent);
RcppExport SEXP _sitsfeats_calc_distance(SEXP lineSEXP, SEXP pts_centSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type line(lineSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pts_cent(pts_centSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_distance(line, pts_cent));
    return rcpp_result_gen;
END_RCPP
}
// gr_calc
arma::vec gr_calc(const arma::mat& pts_cent, const arma::mat& pts_line);
RcppExport SEXP _sitsfeats_gr_calc(SEXP pts_centSEXP, SEXP pts_lineSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pts_cent(pts_centSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pts_line(pts_lineSEXP);
    rcpp_result_gen = Rcpp::wrap(gr_calc(pts_cent, pts_line));
    return rcpp_result_gen;
END_RCPP
}
// integrand
double integrand(double x);
RcppExport SEXP _sitsfeats_integrand(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(integrand(x));
    return rcpp_result_gen;
END_RCPP
}
// teste_linspace
arma::vec teste_linspace(const arma::mat& r, const arma::uword len);
RcppExport SEXP _sitsfeats_teste_linspace(SEXP rSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(teste_linspace(r, len));
    return rcpp_result_gen;
END_RCPP
}
// linspace_vec
arma::vec linspace_vec(const arma::vec& timeseries);
RcppExport SEXP _sitsfeats_linspace_vec(SEXP timeseriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeseries(timeseriesSEXP);
    rcpp_result_gen = Rcpp::wrap(linspace_vec(timeseries));
    return rcpp_result_gen;
END_RCPP
}
// calc_csi
arma::vec calc_csi(const arma::vec& line_length, const arma::vec& poly_area);
RcppExport SEXP _sitsfeats_calc_csi(SEXP line_lengthSEXP, SEXP poly_areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type line_length(line_lengthSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type poly_area(poly_areaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_csi(line_length, poly_area));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _sitsfeats_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _sitsfeats_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _sitsfeats_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _sitsfeats_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sitsfeats_max_ts", (DL_FUNC) &_sitsfeats_max_ts, 1},
    {"_sitsfeats_min_ts", (DL_FUNC) &_sitsfeats_min_ts, 1},
    {"_sitsfeats_sum_ts", (DL_FUNC) &_sitsfeats_sum_ts, 1},
    {"_sitsfeats_mean_ts", (DL_FUNC) &_sitsfeats_mean_ts, 1},
    {"_sitsfeats_std_ts", (DL_FUNC) &_sitsfeats_std_ts, 1},
    {"_sitsfeats_skew_ts", (DL_FUNC) &_sitsfeats_skew_ts, 1},
    {"_sitsfeats_kurt_ts", (DL_FUNC) &_sitsfeats_kurt_ts, 1},
    {"_sitsfeats_amplitude_ts", (DL_FUNC) &_sitsfeats_amplitude_ts, 1},
    {"_sitsfeats_fslope_ts", (DL_FUNC) &_sitsfeats_fslope_ts, 1},
    {"_sitsfeats_abs_sum_ts", (DL_FUNC) &_sitsfeats_abs_sum_ts, 1},
    {"_sitsfeats_amd_ts", (DL_FUNC) &_sitsfeats_amd_ts, 1},
    {"_sitsfeats_mse_ts", (DL_FUNC) &_sitsfeats_mse_ts, 1},
    {"_sitsfeats_fqr_ts", (DL_FUNC) &_sitsfeats_fqr_ts, 1},
    {"_sitsfeats_tqr_ts", (DL_FUNC) &_sitsfeats_tqr_ts, 1},
    {"_sitsfeats_sqr_ts", (DL_FUNC) &_sitsfeats_sqr_ts, 1},
    {"_sitsfeats_iqr_ts", (DL_FUNC) &_sitsfeats_iqr_ts, 1},
    {"_sitsfeats_row_wide_loop", (DL_FUNC) &_sitsfeats_row_wide_loop, 1},
    {"_sitsfeats_convexHullRcpp", (DL_FUNC) &_sitsfeats_convexHullRcpp, 1},
    {"_sitsfeats_calculate_vec", (DL_FUNC) &_sitsfeats_calculate_vec, 1},
    {"_sitsfeats_calculate_vec_v2", (DL_FUNC) &_sitsfeats_calculate_vec_v2, 1},
    {"_sitsfeats_calculate_vec_v3", (DL_FUNC) &_sitsfeats_calculate_vec_v3, 1},
    {"_sitsfeats_calc_distance", (DL_FUNC) &_sitsfeats_calc_distance, 2},
    {"_sitsfeats_gr_calc", (DL_FUNC) &_sitsfeats_gr_calc, 2},
    {"_sitsfeats_integrand", (DL_FUNC) &_sitsfeats_integrand, 1},
    {"_sitsfeats_teste_linspace", (DL_FUNC) &_sitsfeats_teste_linspace, 2},
    {"_sitsfeats_linspace_vec", (DL_FUNC) &_sitsfeats_linspace_vec, 1},
    {"_sitsfeats_calc_csi", (DL_FUNC) &_sitsfeats_calc_csi, 2},
    {"_sitsfeats_rcpparma_hello_world", (DL_FUNC) &_sitsfeats_rcpparma_hello_world, 0},
    {"_sitsfeats_rcpparma_outerproduct", (DL_FUNC) &_sitsfeats_rcpparma_outerproduct, 1},
    {"_sitsfeats_rcpparma_innerproduct", (DL_FUNC) &_sitsfeats_rcpparma_innerproduct, 1},
    {"_sitsfeats_rcpparma_bothproducts", (DL_FUNC) &_sitsfeats_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_sitsfeats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
